* About
 [[https://www.repostatus.org/badges/latest/active.svg][Project Status: Active]]

This is a simple enough repository containing some ~C++~ code and wrappers to
manipulate systems of copper and hydrogen. The focus is on generating data from
~con~ files which can then be visualized in ~R~. By relying on ~readCon~, we can
return dataframes from files without an intermediate stage in ~R~.
** Assumptions
- We return "free atom" forces only, that is we explicitly zero out the forces
  of atoms which are marked as unmoving in the ~con~ file
** Usage
At the moment, the easiest / most robust way to use this is with the ~pixi~ environment and ~renv~.
#+begin_src bash
export PKG_CONFIG_PATH=$CONDA_PREFIX/share/pkgconfig:$PKG_CONFIG_PATH
pixi shell
Rscript -e 'renv::restore()'
#+end_src
Or ~micromamba~:
#+begin_src bash
micromamba create -f environment.yml
micromamba activate cuh2vizR_dev
export PKG_CONFIG_PATH=$CONDA_PREFIX/share/pkgconfig:$PKG_CONFIG_PATH
Rscript -e 'renv::restore()'
#+end_src
*** Prerequisites
We need the ~readConR~ package, so:
#+begin_src bash
Rscript -e 'remotes::install_github("HaoZeke/readconR")'
Rscript -e 'remotes::install_github("TheochemUI/potlibR")'
#+end_src
*** Installation
We can use the following for ensuring everything goes well:
#+begin_src bash
Rscript -e 'library(devtools); devtools::clean_dll(); cpp11::cpp_register(); devtools::document(); devtools::install()'
#+end_src
*** CLI
For the most common use case of creating a path animation there is a helpful CLI:
#+begin_src bash
Rscript -e "cuh2vizR::animate_path()" --dir "../../Theochem/EONgit/client/bbdir" --ground "test_data/cuh2.con"
#+end_src
Or even more generically:
#+begin_src bash
micromamba run -n cuh2vizR_dev Rscript -e "cuh2vizR::animate_path" \
    --dir "$(pwd)" \
    --ground "$(pwd)/reactant.con" \
    --rangeidx "0,70"
#+end_src
*** Contours
#+begin_src R
library("cuh2vizR")
library("readConR")
dfCon<-readCon("test_data/cuh2.con")
cuh2_scan_grid(dfCon$atom_data,
               hcu_dists = seq(-0.05, 5.1, length.out = 60),
               hh_dists = seq(0.4, 3.2, length.out = 60))->dfx
# Or
## cuh2vizR_get_energy_df(dfCon,
##                hcu_dists = seq(-0.05, 5.1, length.out = 60),
##                hh_dists = seq(0.4, 3.2, length.out = 60))->dfx
cuh2vizR_get_energy_contours(dfx)->gplt
gplt %>% ggsave(filename = "plot_contours.png")
#+end_src
* Developing
** Reload
#+begin_src R
devtools::clean_dll()
cpp11::cpp_register()
devtools::document()
devtools::load_all()
#+end_src
** Exports
Rather confusingly (by [[https://github.com/r-lib/cpp11/issues/233][design apparently]]) and unlike ~Rcpp~[fn:whynot],
functions are not automatically exported. They will need an entry in the
~R/pkgname-package.R~ file.
** Linting
~pre-commit~ has trouble locally with ~R~ hoooks so:
#+begin_src bash
Rscript -e 'library(styler); style_dir(".")'
Rscript -e 'library(lintr); lint_package()'
#+end_src
* License
MIT.

[fn:whynot] Generally much more usable
